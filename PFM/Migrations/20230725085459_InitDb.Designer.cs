// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PFM.Database;

#nullable disable

namespace PFM.Migrations
{
    [DbContext(typeof(PfmDbContext))]
    [Migration("20230725085459_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PFM.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("parentcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("PFM.Database.Entities.SplitEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<string>("catcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("transactionid")
                        .IsRequired()
                        .HasColumnType("character varying(64)");

                    b.HasKey("id");

                    b.HasIndex("catcode");

                    b.HasIndex("transactionid");

                    b.ToTable("splits", (string)null);
                });

            modelBuilder.Entity("PFM.Database.Entities.TransactionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CatCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mcc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatCode");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("PFM.Database.Entities.SplitEntity", b =>
                {
                    b.HasOne("PFM.Database.Entities.CategoryEntity", "category")
                        .WithMany("splits")
                        .HasForeignKey("catcode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFM.Database.Entities.TransactionEntity", "transaction")
                        .WithMany("Splits")
                        .HasForeignKey("transactionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("PFM.Database.Entities.TransactionEntity", b =>
                {
                    b.HasOne("PFM.Database.Entities.CategoryEntity", "category")
                        .WithMany("transactions")
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("PFM.Database.Entities.CategoryEntity", b =>
                {
                    b.Navigation("splits");

                    b.Navigation("transactions");
                });

            modelBuilder.Entity("PFM.Database.Entities.TransactionEntity", b =>
                {
                    b.Navigation("Splits");
                });
#pragma warning restore 612, 618
        }
    }
}
